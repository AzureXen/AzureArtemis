# ===================================================================
# Artemis specific properties
# ===================================================================

artemis:
  course-archives-path: ./exports/courses         # a folder in which archived courses and exams are stored.
  legal-path: ./legal                             # a folder in which legal documents (imprint and privacy statements) are stored.
  repo-clone-path: ./repos                        # a folder in which git repos for the online code editor are stored. In a multi node setup, this folder should be in a shared file system area (e.g. based on NFS), so that user can access the same files over multiple nodes
  repo-download-clone-path: ./repos-download      # a temporary folder, in which git repos are downloaded that are immediately deleted afterwards (e.g. exports, plagiarism checks), should NOT be in a shared file system area
  data-export-path: ./data-exports                # a folder in which data exports are stored
  build-logs-path: ./build-logs                   # a folder in which build logs are stored
  bcrypt-salt-rounds: 11  # The number of salt rounds for the bcrypt password hashing. Lower numbers make it faster but more unsecure and vice versa.
  # Please use the bcrypt benchmark tool to determine the best number of rounds for your system. https://github.com/ls1intum/bcrypt-Benchmark
  user-management:
    use-external: true
    password-reset:
      credential-provider: <provider> # The credential provider which users can log in though (e.g. TUMonline)
      links: # The password reset links for different languages
        en: '<link>'
        de: '<link>'
    external:
      url: https://jira.ase.in.tum.de
      user: <username>        # e.g. ga12abc
      password: <password>
      admin-group-name: tumuser
    ldap: # the whole section is optional: whether user details (such as the registration number) can be obtained from a LDAP service
      url: <url>
      user-dn: <user-dn>
      password: <password>
      base: <base>
      allowed-username-pattern: '^([a-z]{2}\d{2}[a-z]{3})$'    # example for a TUM identifier, e.g. ab12cde
    internal-admin:
      username: artemis_admin
      password: artemis_admin
      email: admin@localhost
    registration: # the whole section is optional: whether user can register in Artemis
      enabled: false
      allowed-email-pattern: '[a-zA-Z0-9_\-\.\+]+@(tum\.de|in\.tum\.de|mytum\.de)'
      allowed-email-pattern-readable: '@tum.de, @in.tum.de, @mytum.de'
      cleanup-time-minutes: 60 # The amount of time until non-activated accounts are deleted automatically
    accept-terms: false     # whether users have to accept terms before they can log in, from a privacy point of view this is not needed during education, therefore the default value is false
    course-registration: # Deprecated: replaced by 'course-enrollment'
      # If both 'course-registration' and 'course-enrollment' are configured, the system will favorize the values specified under 'course-enrollment'
      # the whole section is optional: whether there is a restriction for the self-registration of students in courses
      allowed-username-pattern: '^([a-z]{2}\d{2}[a-z]{3})$'    # example for a TUM identifier, e.g. ab12cde
    course-enrollment: # the whole section is optional: whether there is a restriction for the self-registration of students in courses
      allowed-username-pattern: '^([a-z]{2}\d{2}[a-z]{3})$'    # example for a TUM identifier, e.g. ab12cde
    login:
      account-name: TUM                   # optional: customization for the welcome page "please sign in with your <account-name> account"
  version-control:
    url: ${ARTEMIS_SERVER_URL:http://172.17.0.1:8080}
    user: root          # e.g. ga12abc
    password: dummy
    # token: <token>                # VCS API token giving Artemis full Admin access.
    ssh-template-clone-url: ssh://git@bitbucket.ase.in.tum.de:7999/    # Url Stem for cloning via ssh, for gitlab use 'ssh://git@artemistest2gitlab.ase.in.tum.de:2222/'
    ssh-keys-url-path: /plugins/servlet/ssh/account/keys  # Url Path to access a users ssh keys, for gitlab this is '/-/profile/keys'
    ssh-port: 7921
    #        ssh-private-key-folder-path: <ssh-private-key-folder-path>       # the path to the folder in which the private ssh key file (e.g. id_rsa) is stored that can be used to clone git repos on the version control server
    #        ssh-private-key-password: <ssh-private-key-password>        # the password for the private ssh key
    default-branch: main            # The branch that should be used as default branch for all newly created repositories. This does NOT have to be equal to the default branch of the VCS
    use-version-control-access-token: true # for Gitlab and LocalVC setups. For gitlab: a Gitlab-API token can be generated for each user and used as part of the Git clone URL shown to students to allow for password-less Git operations via HTTP. For LocalVC: Artemis generates access tokens for users to use repositories similar to the gitlab setup
    build-agent-git-username: jenkins
    build-agent-git-password: artemis_admin
  continuous-integration:
    user: artemis_admin               # e.g. ga12abc
    password: ${CI_PASSWORD:artemis_admin}
    token: ${CI_USER_TOKEN}
      #117a38b1041db3f27acecf4b9331a4f06f
    # Enter a valid token generated in the CI system giving Artemis full Admin access

    url: http://jenkins:8080
    # Some CI systems, like Jenkins, offer a specific token that gets checked against any incoming notifications
    # from a VCS trying to trigger a build plan. Only if the notification request contains the correct token, the plan
    # is triggered. This can be seen as an alternative to sending an authenticated request to a REST API and then
    # triggering the plan.
    # In the case of Artemis, this is only really needed for the Jenkins + GitLab setup, since the GitLab plugin in
    # hudson.util.Secret is stored in the build plan, so you also have to specify this encrypted string here and NOT the actual token value itself!
    # You can retrieve this by getting any job.xml for a job with an activated GitLab step and your token value of choice.
    secret-push-token: ${CI_SECRET_PUSH_TOKEN:<token hash>}
    # Key of the saved credentials for the VCS service
    # GitLab CI: not needed
    # Jenkins: You have to specify the key from the credentials page in Jenkins under which the user and
    #          password for the VCS are stored
    vcs-credentials: ${VCS-CRED}
    #9abfd99f-46b9-4282-9c49-56e66dbbfc87

    # Key of the credentials for the Artemis notification token
    # Jenkins: You have to specify the key from the credentials page in Jenkins under which the authentication-token is stored
    artemis-authentication-token-key: ${ARTEMIS-AUTHENTICATION-TOKEN-KEY}
    # f4f09705-4a77-4dc3-a6d0-1f030f9d2fe7

    # The actual value of the notification token to check against in Artemis. This is the token that gets send with
    # every request the CI system makes to Artemis containing a ndew result after a build.
    # GitLab CI: The token value you use for the Server Notification Plugin
    # Jenkins: The token value you use for the Server Notification Plugin and is stored under the notification-token credential above
    artemis-authentication-token-value: ${ARTEMIS-AUTHENTICATION-TOKEN-VALUE}
    #your.secret_token_value

    build-timeout: 30 # Does cancel jenkins builds after 30 minutes to remove build that get stuck
    notification-plugin: "ls1tum/artemis-notification-plugin:1.0.0" # Docker image for the generic notification plugin. This value is set in an CI variable in GitLab CI.
    build-log:
      file-expiry-days: 30 # The amount of days until build log files can be deleted
      cleanup-schedule: 0 0 3 * * ? # Cron expression for schedule to delete old build log files
  git:
    name: Artemis
    email: artemis@xcit.tum.de
  athena:
      url: ${ARTEMIS_ATHENA_URL:http://assessment_module_manager:5100}
      secret: ${ARTEMIS_ATHENA_SECRET:abcdef12345}
      restricted-modules: ${ARTEMIS_ATHENA_RESTRICTED_MODULES:module_text_llm,module_programming_llm}
  apollon:
    conversion-service-url: ${APOLLON_CONVERSION_SERVICE_URL:http://apollon-conversion-service:8080}

  scheduling: # these values are cron expressions. To generate one, you can use e.g. https://www.freeformatter.com/cron-expression-generator-quartz.html
    programming-exercises-cleanup-time: 0 0 3 * * * # every day at 3am
    data-export-creation-time: 0 0 4 * * * # every day at 4am
    continuous-plagiarism-control-trigger-time: 0 0 5 * * * # every day at 5am

  data-export:
    days-between-data-exports: 14

  plagiarism-checks:
    plagiarism-results-limit: 100

  science: # The science module is used for research purposes such as the collection of data.
    event-logging: # event logging is used to collect data for research purposes. It is disabled by default.
      enable: false # Set this to true to enable the feature toggle for the science module on startup.
jenkins:
  # only required if Artemis and Jenkins cannot communicate on their public URLs
  # e.g., Jenkins is only available in a local container network
  internal-urls:
    ci-url: ${JENKINS_CI_URL:http://jenkins:8080}
    vcs-url: ${JENKINS_VCS_URL:http://172.17.0.1:8080} # http://172.17.0.1:8080 # `http://host.docker.internal:8080` for Windows
  use-crumb: ${USE_CRUMB}
server:
  port: 8080
  url: ${ARTEMIS_SERVER_URL:http://172.17.0.1:8080} #http://172.17.0.1:8080 # `http://host.docker.internal:8080` for Windows
